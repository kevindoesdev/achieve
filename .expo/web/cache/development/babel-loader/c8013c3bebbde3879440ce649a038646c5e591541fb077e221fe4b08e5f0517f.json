{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { TextInput as PaperTextInput } from \"react-native-paper\";\nimport { useState, useRef } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar FocusBlur = function (FocusBlur) {\n  FocusBlur[\"Idle\"] = \"idle\";\n  FocusBlur[\"Focus\"] = \"focus\";\n  FocusBlur[\"Blur\"] = \"blur\";\n  return FocusBlur;\n}(FocusBlur || {});\nexport var TextInput = function TextInput(_ref) {\n  var placeholder = _ref.placeholder,\n    text = _ref.text,\n    onEndEditing = _ref.onEndEditing;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    editing = _useState2[0],\n    setEditing = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    valueSnapshot = _useState4[0],\n    setValueSnapshot = _useState4[1];\n  var _useState5 = useState(text),\n    _useState6 = _slicedToArray(_useState5, 2),\n    value = _useState6[0],\n    setValue = _useState6[1];\n  var inputRef = useRef(null);\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    blurringInProgress = _useState8[0],\n    _setBlurringInProgress = _useState8[1];\n  var setBlurringInProgress = function setBlurringInProgress() {\n    _setBlurringInProgress(true);\n    setTimeout(function () {\n      _setBlurringInProgress(false);\n      setTimeout(function () {\n        return onEndEditing(value);\n      }, 1);\n    }, 100);\n  };\n  return _jsx(PaperTextInput, {\n    placeholder: placeholder,\n    value: value,\n    mode: \"outlined\",\n    ref: inputRef,\n    outlineStyle: {\n      borderWidth: 0\n    },\n    style: {\n      backgroundColor: \"rgba(0, 0, 0, 0.0)\",\n      fontSize: 20\n    },\n    onFocus: function onFocus() {\n      setEditing(true);\n      setValueSnapshot(value);\n    },\n    onBlur: function onBlur() {\n      setBlurringInProgress();\n      setEditing(false);\n    },\n    onChangeText: function onChangeText(text) {\n      setValue(text);\n    },\n    onEndEditing: function onEndEditing() {\n      console.log('onEndEditing');\n    },\n    left: _jsx(PaperTextInput.Icon, {\n      style: {\n        top: -8\n      },\n      icon: editing ? \"close\" : \"pencil\",\n      forceTextInputFocus: false,\n      onPress: function onPress() {\n        console.log('onPress blockRefocus', blurringInProgress);\n        if (blurringInProgress) {\n          console.log('valueSnapshot', valueSnapshot);\n          setValue(valueSnapshot);\n        } else if (!blurringInProgress) {\n          inputRef.current.focus();\n        }\n      }\n    })\n  });\n};\nTextInput.defaultProps = {\n  onChangeText: function onChangeText() {},\n  onEndEditing: function onEndEditing() {}\n};\nexport default TextInput;","map":{"version":3,"names":["TextInput","PaperTextInput","useState","useRef","jsx","_jsx","FocusBlur","_ref","placeholder","text","onEndEditing","_useState","_useState2","_slicedToArray","editing","setEditing","_useState3","_useState4","valueSnapshot","setValueSnapshot","_useState5","_useState6","value","setValue","inputRef","_useState7","_useState8","blurringInProgress","_setBlurringInProgress","setBlurringInProgress","setTimeout","mode","ref","outlineStyle","borderWidth","style","backgroundColor","fontSize","onFocus","onBlur","onChangeText","console","log","left","Icon","top","icon","forceTextInputFocus","onPress","current","focus","defaultProps"],"sources":["/home/rocket/git/achieve/src/components/TextInput.tsx"],"sourcesContent":["import { TextInput as PaperTextInput } from \"react-native-paper\";\nimport { TextInput as RNTextInput } from \"react-native\";\nimport { useState, useRef } from \"react\";\n\ninterface Props {\n  placeholder?: string,\n  text: string,\n  onChangeText: (text: string) => void,\n  onEndEditing: (text: string) => void\n}\n\nenum FocusBlur {\n  Idle = 'idle',\n  Focus = 'focus',\n  Blur = 'blur'\n}\n\nexport const TextInput = ({ placeholder, text, onEndEditing }: Props) => {\n  const [editing, setEditing] = useState(false);\n  const [valueSnapshot, setValueSnapshot] = useState('');\n  const [value, setValue] = useState(text);\n  const inputRef = useRef<RNTextInput>(null);\n  const [blurringInProgress, _setBlurringInProgress] = useState(false);\n  \n  const setBlurringInProgress = () => {\n    _setBlurringInProgress(true);\n    setTimeout(() => {\n      _setBlurringInProgress(false)\n      setTimeout(() => onEndEditing(value), 1);\n    }, 100)\n  }\n  \n  return (\n    <PaperTextInput\n      placeholder={placeholder}\n      value={value}\n      mode=\"outlined\"\n      ref={inputRef}\n      outlineStyle={{ borderWidth: 0 }}\n      style={{\n        backgroundColor: \"rgba(0, 0, 0, 0.0)\",\n        fontSize: 20,\n      }}\n      onFocus={() => {\n        setEditing(true);\n        setValueSnapshot(value);\n      }}\n      onBlur={() => {\n        setBlurringInProgress();\n        setEditing(false);\n      }}\n      onChangeText={(text) => {\n        setValue(text)\n      }}\n      onEndEditing={() => {\n        // onEditEditing is never called on web\n        console.log('onEndEditing')\n      }}\n      left={\n        <PaperTextInput.Icon\n          style={{ top: -8 }}\n          icon={editing ? \"close\" : \"pencil\"}\n          forceTextInputFocus={false}\n          onPress={() => {\n            console.log('onPress blockRefocus', blurringInProgress)\n            if (blurringInProgress) {\n              console.log('valueSnapshot', valueSnapshot)\n              setValue(valueSnapshot);\n            } else if (!blurringInProgress) {\n              (inputRef as any).current.focus();\n            }\n          }}\n        />\n      }\n    />\n  );\n};\n\nTextInput.defaultProps = {\n  onChangeText: () => {},\n  onEndEditing: () => {},\n};\n\nexport default TextInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}